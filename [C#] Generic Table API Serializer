        
        //this uses a table (mapped to DataGrokEntities.Routes) that has two columns, a route column with a value that is translated into a url parameter
        //and a query column, which contains a query that is executed upon visiting said route column.  
        
        //This allows for an api endpoint to be created and maintained using only sql table edits, while still negating SQL injection attacks
        
        
        public dynamic Get(string url)
        {
            using (var ctx = new DataGrokEntities())
            {
                Route r = ctx.Routes.FirstOrDefault(x => x.URL == url);

                if (r == null)
                    return "URL not found.";

                using (SqlConnection conn = new SqlConnection(ctx.Database.Connection.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand();
                    cmd.CommandText = r.SQL;
                    cmd.CommandType = CommandType.Text;
                    cmd.Connection = conn;
                    cmd.CommandTimeout = 1800; //30 mins
                    conn.Open();

                    List<string> results = new List<string>();

                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        return Serialize(reader);
                    }
                }
            }
        }

        public IEnumerable<Dictionary<string, object>> Serialize(SqlDataReader reader)
        {
            var results = new List<Dictionary<string, object>>();
            var cols = new List<string>();
            for (var i = 0; i < reader.FieldCount; i++)
                cols.Add(reader.GetName(i));

            while (reader.Read())
                results.Add(SerializeRow(cols, reader));

            return results;
        }
        
