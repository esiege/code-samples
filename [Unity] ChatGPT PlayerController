using UnityEngine;
using UnityEngine.Networking;
using System.Collections;

using UnityEngine;
using UnityEngine.Networking;
using System.Collections;
using System.Collections.Generic;

public class PlayerPrompts : MonoBehaviour
{
    private const string API_ENDPOINT = "https://api.openai.com/v1/chat/completions";
    private const string API_KEY = "sk-123123123";

    [Header("Prompt Strings")]
    string prompt1 = "The following is a description of a character in an RPG game.  Considering the following traits of the character, in the objects that he perceives around him in the world, decide on the next action that the character will take, and the next line of dialogue that they will speak.  Here is a list of attributes for the character:";
    string prompt2 = "Respond using proper JSON format in the following structure {actionName: name of predicted action, moveTarget: xy position that character will move towards represented in {x:123, y:123} format, dialog: a line of dialogue the character speaks related to the situation, emote: an emote displayed by the character}";

    [Header("Character Attributes")]
    public string Name = "Prudence Hobwater";
    public string Personality = "prissy, nihilistic, loves cozy fantasy novels, enjoys tea, hates bad weather";
    public string Class = "herbologist";
    public string Objective = "gather unique herbs to make the house nice and ward off spirits";
    public Position CurrentPosition = new Position { X = 2, Y = 5 };
    public string CurrentAction = "Walking North";


    [Header("Perceived Objects")]
    public List<PerceivedObject> PerceivedObjects = new List<PerceivedObject>
    {
        new PerceivedObject { ObjectType = "Tree", Location = new Position { X = 1, Y = 1 } },
        new PerceivedObject { ObjectType = "Tree", Location = new Position { X = 1, Y = 2 } },
        new PerceivedObject { ObjectType = "Tree", Location = new Position { X = 1, Y = 3 } },
        new PerceivedObject { ObjectType = "Tree", Location = new Position { X = 1, Y = 4 } },
        new PerceivedObject { ObjectType = "Plant", Location = new Position { X = 2, Y = 1 } },
        new PerceivedObject { ObjectType = "Box of rotten meat", Location = new Position { X = 2, Y = 2 } },
        new PerceivedObject { ObjectType = "Plant", Location = new Position { X = 2, Y = 3 } },
        new PerceivedObject { ObjectType = "Plant", Location = new Position { X = 3, Y = 4 } },
        new PerceivedObject { ObjectType = "Plant", Location = new Position { X = 4, Y = 4 } },
        new PerceivedObject { ObjectType = "Strange looking man hiding in the bushes", Location = new Position { X = 2, Y = 1 } }
    };

    [System.Serializable]
    public class PerceivedObject
    {
        public string ObjectType;
        public Position Location;
    }

    [System.Serializable]
    public class Position
    {
        public int X;
        public int Y;
    }

    public void Start()
    {
        StartCoroutine(PostChatGPTAsync());
    }

    private IEnumerator PostChatGPTAsync()
    {
        string prompt = "";

        prompt += prompt1;
        prompt += "\n\nCharacter name: " + Name;
        prompt += "\nPersonality: " + Personality;
        prompt += "\nClass: " + Class;
        prompt += "\nObjective: " + Objective;
        prompt += "\nCurrentPosition: x:" + CurrentPosition.X + ", y:" + CurrentPosition.Y;
        prompt += "\nCurrentAction: " + CurrentAction;
        prompt += "\n\n" + prompt2;

        var requestBody = new
        {
            //model = "gpt-3.5-turbo",
            model = "gpt-4",
            messages = new[]
            {
                new
                {
                    role = "user",
                    content = prompt
                }
            }
        };

        string requestBodyJson = Newtonsoft.Json.JsonConvert.SerializeObject(requestBody);

        using (UnityWebRequest www = new UnityWebRequest(API_ENDPOINT, "POST"))
        {
            byte[] bodyRaw = System.Text.Encoding.UTF8.GetBytes(requestBodyJson);
            www.uploadHandler = new UploadHandlerRaw(bodyRaw);
            www.downloadHandler = new DownloadHandlerBuffer();
            www.SetRequestHeader("Content-Type", "application/json");
            www.SetRequestHeader("Authorization", "Bearer " + API_KEY);

            yield return www.SendWebRequest();

            if (www.result != UnityWebRequest.Result.Success)
            {
                Debug.LogError(www.error);
            }
            else
            {
                string jsonResponse = www.downloadHandler.text; // This is the JSON response from the API
                ChatCompletionResponse chatCompletion = JsonUtility.FromJson<ChatCompletionResponse>(jsonResponse);

                // Parse the content field into the ActionResponse class
                ActionResponse actionResponse = JsonUtility.FromJson<ActionResponse>(chatCompletion.choices[0].message.content);

                Debug.Log("Action Name: " + actionResponse.actionName);
                Debug.Log("Move Target X: " + actionResponse.moveTarget.x);
                Debug.Log("Move Target Y: " + actionResponse.moveTarget.y);
                Debug.Log("Dialog: " + actionResponse.dialog);
                Debug.Log("Emote: " + actionResponse.emote);
            }
        }
    }


    [System.Serializable]
    public class ChatCompletionResponse
    {
        public string id;
        public string @object;
        public long created;
        public string model;
        public Choice[] choices;
        public Usage usage;
    }

    [System.Serializable]
    public class Choice
    {
        public int index;
        public Message message;
        public string finish_reason;
    }

    [System.Serializable]
    public class Message
    {
        public string role;
        public string content;
    }

    [System.Serializable]
    public class Usage
    {
        public int prompt_tokens;
        public int completion_tokens;
        public int total_tokens;
    }

    [System.Serializable]
    public class ChatGPTResult
    {
        public string name;
        public string description;
    }
    
    [System.Serializable]
    public class ChatGPTResultsWrapper
    {
        public ChatGPTResult[] results;
    }
    [System.Serializable]
    public class ActionResponse
    {
        public string actionName;
        public MoveTarget moveTarget;
        public string dialog;
        public string emote;
    }

    [System.Serializable]
    public class MoveTarget
    {
        public int x;
        public int y;
    }



}
